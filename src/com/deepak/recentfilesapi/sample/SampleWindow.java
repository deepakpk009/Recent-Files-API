/*
 This file is part of RecentFiles API v0.1

 RecentFiles API is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 RecentFiles API is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with RecentFiles API.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.deepak.recentfilesapi.sample;

import com.deepak.recentfilesapi.FileIconTypes;
import com.deepak.recentfilesapi.RecentFileHandler;
import com.deepak.recentfilesapi.RecentFilesManager;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.File;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * This class shows how to use the RecentFiles API
 *
 * @author deepak
 */
public class SampleWindow extends javax.swing.JFrame implements DropTargetListener, RecentFileHandler {

    /**
     * the recent files manager object
     */
    private RecentFilesManager recentFilesManager = null;
    /**
     * the drop target object
     */
    private DropTarget dropTarget = null;

    /**
     * Creates new form SampleWindow
     */
    public SampleWindow() {
        initComponents();
        // Set up our frame to recieve drops...        
        dropTarget = new DropTarget(this, this);
        // create the recent files manager object
        try {
            recentFilesManager = new RecentFilesManager(
                    this,// pass the current class as the RecentFileHandler             
                    recentFilesMenu, // the recent files JMenu object
                    "recent.config", // the recent files config file name
                    3, // the max record value
                    // the file icon type array parameter
                    new FileIconTypes[]{
                        // specifiying the default icon for all types
                        new FileIconTypes(
                        "",// empty string for default file type matching
                        // the file icon object
                        new ImageIcon(getClass().getResource("/com/deepak/recentfilesapi/sample/file.png")))
                    });
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    recentFilesMenu,
                    "Could not create/load recent config file!",
                    "Config File Error\n" + ex,
                    JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        recentFilesMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RecentFilesAPI Sample");
        setResizable(false);

        infoLabel.setText("<html>\n<center>Drag and Drop files into the window to see</center>\n<center>the recent files menu updated.</center>\n</html>");

        fileMenu.setText("File");

        recentFilesMenu.setText("Recent Files");
        fileMenu.add(recentFilesMenu);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SampleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SampleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SampleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SampleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SampleWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu recentFilesMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void dragEnter(DropTargetDragEvent dtde) {
        // do nothing
    }

    @Override
    public void dragOver(DropTargetDragEvent dtde) {
        // do nothing
    }

    @Override
    public void dropActionChanged(DropTargetDragEvent dtde) {
        // do nothing
    }

    @Override
    public void dragExit(DropTargetEvent dte) {
        // do nothing
    }

    /**
     * method called on drop event
     *
     * @param dropEvent the drop target drop event
     */
    @Override
    public void drop(DropTargetDropEvent dropEvent) {
        try {
            // get the dropped object and check its type
            Transferable transferable = dropEvent.getTransferable();
            // get the data flavors
            DataFlavor[] flavors = transferable.getTransferDataFlavors();
            // check if the flavor is of file list type
            if (flavors[0].isFlavorJavaFileListType()) {
                // if yes then accept copy drops
                dropEvent.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
                // get the files list
                List list = (List) transferable.getTransferData(flavors[0]);
                // we will be concerning only about the first file so get the first file
                File file = (File) list.get(0);
                // create attribtes String array
                String[] attributes = {
                    Math.random()+"", // attribute[0] is the file name
                    String.valueOf(file.length()) // attribute[1] is the file size
                };
                // add the file along with the attributes to the recent files manager
                recentFilesManager.add(file, attributes);
                // notify the drop complete
                dropEvent.dropComplete(true);
                // return
                return;
            }
            // on unsupported drop event just reject the drop and do not notify the user
            dropEvent.rejectDrop();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(recentFilesMenu, ex.getLocalizedMessage(), "Drop Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    /**
     * the onRecentFileSelection method implementation of the RecentFileHandler
     * interface
     *
     * @param file the file which is selected
     * @param attributes the attributes associated with the file
     * @return return true if file handled properly, else return false
     */
    @Override
    public boolean onRecentFileSelection(File file, String[] attributes) {
        // if file exists then display info
        if (file.exists()) {
            String message =
                    "<html>"
                    + "<br>File Full Path : " + file.getAbsolutePath()
                    + "<br>File Name : " + attributes[0]
                    + "<br>File Size : " + attributes[1]
                    + "</html>";
            JOptionPane.showMessageDialog(recentFilesMenu, message);
            return true;
        } else {
            // else display error
            JOptionPane.showMessageDialog(recentFilesMenu, "File doesnot exists! removing it from recent files list.", "File Not Found Error", JOptionPane.ERROR_MESSAGE);
            // retunr false. this removes this recent file from the recent file list
            return false;
        }
    }
}
